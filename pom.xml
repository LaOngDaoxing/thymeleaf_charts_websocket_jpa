<project xmlns="http://maven.apache.org/POM/4.0.0"
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
  		http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<!--声明项目描述符遵循哪一个POM模型版本。模型本身的版本很少改变，虽然如此，但它仍然是必不可少的，这是为了当Maven引入了新的特性或者其他模型变更的时候，确保稳定性。 -->
	<modelVersion>4.0.0</modelVersion>
	<!--项目的全球唯一标识符，通常使用全限定的包名区分该项目和其他项目。并且构建时生成的路径也是由此生成， 如com.mycompany.app生成的相对路径为：/com/mycompany/app -->
	<groupId>com.ljx.tcwj</groupId>
	<!--构件的标识符，它和group ID一起唯一标识一个构件。换句话说，你不能有两个不同的项目拥有同样的artifact ID和groupID；在某个特定的group
		ID下，artifact ID也必须是唯一的。构件是项目产生的或使用的一个东西，Maven为项目产生的构件包括：JARs，源码，二进制发布和WARs等。 -->
	<artifactId>thymeleaf_charts_websocket_jpa</artifactId>
	<!--项目产生的构件类型，例如jar、war（推荐）、ear、pom。插件可以创建他们自己的构件类型，所以前面列的不是全部构件类型 -->
	<packaging>jar</packaging>
	<!--项目当前版本，格式为:主版本.次版本.增量版本-限定版本号 -->
	<version>0.0.1-SNAPSHOT</version>
	<!--项目的名称, Maven产生的文档用 -->
	<name>thymeleaf_charts_websocket_jpa</name>

	<!-- Spring Boot父级依赖 ，lookup parent from repository。 -->
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.5.4</version>
		<relativePath />
	</parent>
	<!-- 统一管理版本号 -->
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
		<!-- mybatis版本号 -->
		<mybatis.version>3.5.0</mybatis.version>
		<mybatis.spring.version>1.3.2</mybatis.spring.version>
		<!-- jackson版本号 -->
		<jackson.version>2.13.0-rc2</jackson.version>
		<!-- log4j日志文件管理包版本 -->
		<slf4j.version.ljx>2.0.0-alpha5</slf4j.version.ljx>
		<!-- httpclient版本号 -->
		<httpclient.version>4.5.12</httpclient.version>
	</properties>

	<!-- 项目所需依赖的jar -->
	<dependencies>
		<!-- ———————————————————————————————Spring Boot——————————————————————————————————
			一、框架和架构的区别
				框架是一种特殊的半成品软件，由代码组成，为构建解决方案提供良好的项目代码基础。
				架构不是软件，属于文字性规范描述，是问题的抽象解决方案。
				Spring框架是一个分层架构/Spring框架采用了分层架构的思想。
			二、项目上的图标简介
				1、项目上有个大写的M，表示的是项目使用了Maven工具【Maven是一个项目管理和整合工具：通过配置pom.xml文件，来管理项目的jar包的工具】。
				2、项目上有个大写的J，表示的是项目使用了Java框架
					【
						Java框架就是一些类和接口的集合，通过这些类和接口协调来完成一系列的程序实现。
						Java框架可以分为三层，俗称 Java三大框架|Java三层架构：表现层，业务逻辑层，数据访问层；Java三大框架是用来开发web应用程序中使用的。
							（1）表现层（等价于MVC中的视图层和控制器）的主流框架有：struts1 ，struts2 ，springMVC ，webwork .
							（2）业务逻辑层（采用了控制反转的技术,管理Bean,降低了各层之间的耦合）的主流框架有：Spring .
							（3）数据访问层（做持久化的,对JDBC轻量级的封装,使得我们可以面向对象的操作数据库）的主流框架有：Hibernate，Ibatis，以及Ibatis的升级版Mybatis .
					】
					不需要使用服务器部署启动项目，仅在**.java文件中由main方法调用执行。
				3、项目上有个地球图标，表示的是项目为Web项目；需要使用服务器Tomcat等部署启动项目，在浏览器展示页面。
				4、项目上有个大写的S，表示的是项目使用了Spring框架【Spring是目前主流的 Java Web 开发框架】。
		 -->
		<!-- SpringBoot 核心包 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>
		<!-- SpringBoot 测试 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- SpringBoot 拦截器 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-aop</artifactId>
		</dependency>
		<!-- SpringBoot Web容器 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<!-- 排除这个slf4j-log4j12
                如果你用的是logback 日志，一定要排除slf4j-log4j12 包，不要排除logback-classic 包。
                因此需注意springboot引入的spring-boot-starter-web包中、zookeeper包中，默认引入了slf4j-log4j12包。
            -->
			<exclusions>
				<exclusion>
					<groupId>log4j</groupId>
					<artifactId>log4j</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-api</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-log4j12</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<!-- SpringBoot集成Thymeleaf模板引擎 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
		<!-- 添加日志依赖 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-logging</artifactId>
		</dependency>
		<!-- ————Spring Loaded实现热部署______方法一__启动方法只能：mvn spring-boot:run -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<!-- 表示依赖不会传递 -->
			<optional>true</optional>
		</dependency>
		<!-- jpa包 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<!-- ———————————————————————————————Spring Boot END—————————————————————————————————— -->

		<!-- ———————————————————————————————servlet——————————————————————————————————
			servlet包只是编译时需要，而发布时不需要，避免与tomcat中的servlet包发生冲突,解决jsp页面使用el表达式错误
			<scope>provide</scope>
		-->
		<!-- 引入Servlet -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>4.0.1</version>
			<scope>provided</scope>
		</dependency>
		<!-- 引入jstl-1.2.jar
			（1）jar包所在仓库下载地址》https://mvnrepository.com/artifact/javax.servlet/jstl
		   	（2）应用步骤
		   		JSTL使用需引入两个jar包:jstl与taglibs
		   		jsp页面，使用taglib uri="http://java.sun.com/jstl/core_rt"
		 -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>
		<!--引入jsp相关 -->
		<dependency>
			<groupId>javax.servlet.jsp</groupId>
			<artifactId>jsp-api</artifactId>
			<version>2.2</version>
			<scope>provided</scope>
		</dependency>
		<!-- 引入standard-1.1.2.jar
			（1）jar包所在仓库下载地址》https://mvnrepository.com/artifact/javax.servlet/jstl
		   	（2）应用步骤
		   		JSTL使用需引入两个jar包:jstl与taglibs
		   		jsp页面，使用taglib uri="http://java.sun.com/jstl/core_rt"
		 -->
		<dependency>
			<groupId>taglibs</groupId>
			<artifactId>standard</artifactId>
			<version>1.1.2</version>
		</dependency>
		<!-- ———————————————————————————————servlet END———————————————————————————————————— -->

		<!-- ———————————————————————————————commons jar—————————————————————————————————— -->
		<dependency>
			<groupId>commons-beanutils</groupId>
			<artifactId>commons-beanutils</artifactId>
			<version>1.8.3</version>
		</dependency>
		<!-- 加解密:Apache开源组织提供的用于摘要运算、编码的包。在该包中主要分为四类加密：BinaryEncoders、DigestEncoders、LanguageEncoders、NetworkEncoders。
			是编码和解码组件，提供常用的编码和解码方法，如DES、SHA1、MD5、Base64、URL和Soundx等。 -->
		<dependency>
			<groupId>commons-codec</groupId>
			<artifactId>commons-codec</artifactId>
			<version>1.9</version>
		</dependency>

		<!-- 数据源实现包 -->
		<dependency>
			<groupId>commons-dbcp</groupId>
			<artifactId>commons-dbcp</artifactId>
			<version>1.4</version>
		</dependency>
		<dependency>
			<groupId>commons-dbutils</groupId>
			<artifactId>commons-dbutils</artifactId>
			<version>1.6</version>
		</dependency>
		<!-- 文件上传:为Web应用程序或Servlet提供文件上传功能，Struts2和SpringMVC的文件上传组件。 依赖包：Commons
			IO -->
		<dependency>
			<groupId>commons-fileupload</groupId>
			<artifactId>commons-fileupload</artifactId>
			<version>1.3.3</version>
		</dependency>
		<!-- 字符串工具类使用 -->
		<dependency>
			<groupId>commons-lang</groupId>
			<artifactId>commons-lang</artifactId>
			<version>2.5</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.11</version>
		</dependency>
		<!-- 处理IO的工具类包，对java.io进行扩展，提供了更加方便的IO操作。 -->
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.6</version>
		</dependency>
		<!-- 提供统一的日志接口，同时兼顾轻量级和不依赖于具体的实现。 类包给中间件/日志工具开发者一个简单的日志操作抽象，允许程序开发人员使用不同的具体日志实现工具。
			为spring 提供依赖支持 -->
		<dependency>
			<groupId>commons-logging</groupId>
			<artifactId>commons-logging</artifactId>
			<version>1.2</version>
		</dependency>
		<!-- 连接池 -->
		<dependency>
			<groupId>commons-pool</groupId>
			<artifactId>commons-pool</artifactId>
			<version>1.6</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-collections4</artifactId>
			<version>4.1</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-compress</artifactId>
			<version>1.20</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-math3</artifactId>
			<version>3.6.1</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-pool2</artifactId>
			<version>2.9.0</version>
		</dependency>
		<!-- ——————————————————————————————commons END——————————————————————————————————— -->

		<!-- —————————————————————————————————Json——————————————————————————————————————— -->
		<!-- com.alibaba.fastjson.JSON -->
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>fastjson</artifactId>
			<version>1.1.30</version>
		</dependency>
		<dependency>
			<groupId>org.eclipse</groupId>
			<artifactId>yasson</artifactId>
			<version>1.0</version>
		</dependency>
		<dependency>
			<groupId>javax.json</groupId>
			<artifactId>javax.json-api</artifactId>
			<version>1.1.4</version>
		</dependency>

		<dependency>
			<groupId>org.glassfish</groupId>
			<artifactId>javax.json</artifactId>
			<version>1.1</version>
		</dependency>
		<!-- gson解析 -->
		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
			<version>2.8.8</version>
		</dependency>
		<!-- 构造和解析Json数据 -->
		<dependency>
			<groupId>org.json</groupId>
			<artifactId>json</artifactId>
			<version>20210307</version>
		</dependency>
		<!-- net.sf.json解析 -->
		<dependency>
			<groupId>net.sf.json-lib</groupId>
			<artifactId>json-lib</artifactId>
			<version>2.4</version>
			<classifier>jdk15</classifier>
		</dependency>
		<!-- —————————————————————————————————Json END———————————————————————————————————— -->

		<!-- —————————————————————————————————Jackson———————————————————————————————————— -->
		<!-- json相关jar包 ：Jackson核心 、提供jackson核心支持 -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-core</artifactId>
			<version>${jackson.version}</version>
		</dependency>
		<!-- Jackson注解:Jackson数据绑定包使用的核心注释，用于值类型。该包提供Json注解支持 -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-annotations</artifactId>
			<version>${jackson.version}</version>
		</dependency>

		<!--Jackson数据绑定 -->
		<!-- 对象序列化支持 -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>${jackson.version}</version>
			<exclusions>
				<exclusion>
					<groupId>com.fasterxml.jackson.core</groupId>
					<artifactId>jackson-annotations</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-mapper-asl</artifactId>
			<version>1.9.13</version>
		</dependency>
		<!-- ————————————————————————————————Jackson END————————————————————————————————— -->

		<!-- ————————————————————————————————hibernate ————————————————————————————————— -->
		<dependency>
			<groupId>org.hibernate.common</groupId>
			<artifactId>hibernate-commons-annotations</artifactId>
			<version>5.1.2.Final</version>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<version>5.2.18.Final</version>
		</dependency>
		<dependency>
			<groupId>org.hibernate.javax.persistence</groupId>
			<artifactId>hibernate-jpa-2.1-api</artifactId>
			<version>1.0.2.Final</version>
		</dependency>
		<dependency>
			<groupId>org.hibernate.validator</groupId>
			<artifactId>hibernate-validator</artifactId>
			<version>7.0.1.Final</version>
		</dependency>
		<dependency>
			<groupId>org.hibernate.validator</groupId>
			<artifactId>hibernate-validator-annotation-processor</artifactId>
			<version>7.0.1.Final</version>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-entitymanager</artifactId>
			<version>5.2.18.Final</version>
		</dependency>
		<dependency>
			<groupId>org.apache.bval</groupId>
			<artifactId>bval-jsr</artifactId>
			<version>2.0.5</version>
		</dependency>
		<!-- ————————————————————————————————hibernate END————————————————————————————————— -->

		<!-- —————————————————————————————————mybatis———————————————————————————————————— -->
		<!-- Mybatis_方式2 -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis</artifactId>
			<version>${mybatis.version}</version>
		</dependency>
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis-spring</artifactId>
			<version>${mybatis.spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.mybatis.spring.boot</groupId>
			<artifactId>mybatis-spring-boot-starter</artifactId>
			<version>1.3.1</version>
		</dependency>
		<!-- —————————END————————— -->
		<!-- 通用Mapper1_方式1 -->
		<dependency>
			<groupId>com.github.abel533</groupId>
			<artifactId>mapper</artifactId>
			<version>3.0.1</version>
		</dependency>
		<!-- 通用Mapper2_方式2 -->
		<dependency>
			<groupId>tk.mybatis</groupId>
			<artifactId>mapper</artifactId>
			<version>4.0.2</version>
		</dependency>
		<dependency>
			<groupId>tk.mybatis</groupId>
			<artifactId>mapper-spring-boot-starter</artifactId>
			<version>1.1.5</version>
		</dependency>
		<!-- —————————————————————————————————mybatis END———————————————————————————————— -->

		<!-- —————————————————————————————————redis ————————————————————————————————— -->
		<dependency>
			<groupId>redis.clients</groupId>
			<artifactId>jedis</artifactId>
			<version>3.7.0</version>
		</dependency>
		<!-- —————————————————————————————————redis END————————————————————————————————— -->

		<!-- —————————————————————————————————数据库————————————————————————————————————— -->
		<!--1、mysql数据库驱动 -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
		</dependency>
		<!--2、sqlserver数据库驱动 -->
		<!--
			问题：pom.xml会提示：Missing artifact com.microsoft.sqlserver:sqljdbc4:jar:4.0
			直接原因：maven本地资源库路径下确实没有sqljdbc4.jar文件。
			根本原因： 微软不允许以maven的方式直接下载该文件
			解决方法：
				（1）下载地址可以百度搜索sqljdbc4.jar，去微软官网下载jar包sqljdbc4.jar
				（2）百度云盘下载地址：链接:  http://pan.baidu.com/s/1nu6cgdz   密码: ikqn
				（3）将sqljdbc4.jar，改名为sqljdbc4-4.0.jar；
				（4）再把sqljdbc4-4.0.jar放到maven本地仓库的指定目录下
					【即D:\developsoft\java\javaweb\commonBackPlugins\maven\apache-maven-3.5.4\maven_localM2\com\microsoft\sqlserver\sqljdbc4\4.0\sqljdbc4-4.0.jar】
				（5）桌面打开软件MyeclipseCI201904》项目 右键》Maven》Update Project...》
		 -->
		<dependency>
			<groupId>com.microsoft.sqlserver</groupId>
			<artifactId>sqljdbc4</artifactId>
			<version>4.0</version>
		</dependency>
		<!-- —————————————————————————————————数据库 END————————————————————————————————— -->

		<!-- —————————————————————————————————数据库连接池 ————————————————————————————————— -->
		<!-- 阿里巴巴的druid来当数据库连接池 -->
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>druid</artifactId>
			<version>1.0.20</version>
		</dependency>
		<!-- —————————————————————————————————数据库连接池 END————————————————————————————————— -->

		<!-- —————————————————————————————————日志 ———————————————————————————————————— -->
		<dependency>
			<groupId>org.jboss.logging</groupId>
			<artifactId>jboss-logging</artifactId>
			<version>3.4.2.Final</version>
		</dependency>
		<!-- 低版本 -->

		<!-- 高版本 -->
		<!-- —————————————————————————————————日志 END——————————————————————————————————— -->

		<!-- ————————————————————————————————文件操作———————————————————————————————————— -->
		<!-- excel文件操作 -->
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi</artifactId>
			<version>5.0.0</version>
		</dependency>
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi-ooxml</artifactId>
			<version>5.0.0</version>
		</dependency>
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi-ooxml-schemas</artifactId>
			<version>4.1.2</version>
		</dependency>
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi-scratchpad</artifactId>
			<version>5.0.0</version>
		</dependency>
		<!-- PDF文件操作 -->
		<!-- 中文需要引入的jar包 -->
		<dependency>
			<groupId>com.itextpdf</groupId>
			<artifactId>itext-asian</artifactId>
			<version>5.2.0</version>
		</dependency>
		<dependency>
			<groupId>com.itextpdf</groupId>
			<artifactId>itextpdf</artifactId>
			<version>5.5.10</version>
		</dependency>
		<!-- WORD文件操作 -->
		<dependency>
			<groupId>com.lowagie</groupId>
			<artifactId>itext</artifactId>
			<version>2.1.7</version>
		</dependency>
		<dependency>
			<groupId>com.lowagie</groupId>
			<artifactId>itext-rtf</artifactId>
			<version>2.1.7</version>
		</dependency>
		<!-- ———————————————————————————————文件操作 END———————————————————————————————— -->

		<!-- —————————————————————————————————工具 ———————————————————————————————————— -->
		<!-- 引入jsqlparser-1.1.jar
			（1）jar包所在仓库下载地址》https://mvnrepository.com/artifact/com.github.jsqlparser/jsqlparser
		 -->
		<dependency>
			<groupId>com.github.jsqlparser</groupId>
			<artifactId>jsqlparser</artifactId>
			<version>1.1</version>
		</dependency>
		<!--pagehelper 分页插件
			pagehelper-4.1.6.jar版本依赖于/需匹配 jsqlparser-1.1.jar，否则会造成版本冲突，以至于tomcat启动失败
		-->
		<dependency>
			<groupId>com.github.pagehelper</groupId>
			<artifactId>pagehelper-spring-boot-starter</artifactId>
			<version>1.2.3</version>
		</dependency>
		<dependency>
			<groupId>com.github.pagehelper</groupId>
			<artifactId>pagehelper</artifactId>
			<version>5.2.1</version>
		</dependency>
		<!-- httpclient -->
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
			<version>${httpclient.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpcore</artifactId>
			<version>4.4.14</version>
		</dependency>
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpmime</artifactId>
			<version>4.5.13</version>
		</dependency>
		<!-- 用于打包 -->
		<dependency>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-resources-plugin</artifactId>
			<version>3.0.1</version>
		</dependency>
		<dependency>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-compiler-plugin</artifactId>
			<version>3.8.1</version>
		</dependency>

		<!--引入Javaee8 -->
		<dependency>
			<groupId>javax</groupId>
			<artifactId>javaee-api</artifactId>
			<version>8.0</version>
		</dependency>
		<!-- junit测试 -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.11</version>
			<scope>test</scope>
		</dependency>
		<!-- —————————————————————————————————工具 END ———————————————————————————————————— -->

		<!-- —————————————————————————————————日期时间 ———————————————————————————————————— -->
		<dependency>
			<groupId>joda-time</groupId>
			<artifactId>joda-time</artifactId>
			<version>2.10.10</version>
		</dependency>
		<!-- —————————————————————————————————日期时间 END ———————————————————————————————————— -->

		<!-- ——————————————————————————————未知jar ——————————————————————————————————— -->
		<!-- 用于编译java文件，打包，部署。打包：jar，war，ear包等。 -->
		<dependency>
			<groupId>org.apache.ant</groupId>
			<artifactId>ant</artifactId>
			<version>1.10.11</version>
		</dependency>
		<!-- 用于相关的hibernate映射执行hql语句 -->
		<dependency>
			<groupId>antlr</groupId>
			<artifactId>antlr</artifactId>
			<version>2.7.7</version>
		</dependency>
		<dependency>
			<groupId>asm</groupId>
			<artifactId>asm</artifactId>
			<version>3.3</version>
		</dependency>
		<dependency>
			<groupId>asm</groupId>
			<artifactId>asm-commons</artifactId>
			<version>3.3</version>
		</dependency>
		<dependency>
			<groupId>asm</groupId>
			<artifactId>asm-tree</artifactId>
			<version>3.3</version>
		</dependency>
		<dependency>
			<groupId>cglib</groupId>
			<artifactId>cglib</artifactId>
			<version>3.3.0</version>
		</dependency>
		<dependency>
			<groupId>c3p0</groupId>
			<artifactId>c3p0</artifactId>
			<version>0.9.1.2</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml</groupId>
			<artifactId>classmate</artifactId>
			<version>0.7.0</version>
		</dependency>
		<dependency>
			<groupId>org.aopalliance</groupId>
			<artifactId>com.springsource.org.aopalliance</artifactId>
			<version>1.0.0</version>
		</dependency>
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>com.springsource.org.aspectj.weaver</artifactId>
			<version>1.6.8.RELEASE</version>
		</dependency>
		<!-- 扫描二维码相关 -->
		<dependency>
			<groupId>com.google.zxing</groupId>
			<artifactId>core</artifactId>
			<version>3.4.0</version>
		</dependency>
		<dependency>
			<groupId>com.google.zxing</groupId>
			<artifactId>javase</artifactId>
			<version>3.4.1</version>
		</dependency>
		<dependency>
			<groupId>dom4j</groupId>
			<artifactId>dom4j</artifactId>
			<version>1.6.1</version>
		</dependency>
		<dependency>
			<groupId>net.sf.ezmorph</groupId>
			<artifactId>ezmorph</artifactId>
			<version>1.0.3</version>
		</dependency>
		<dependency>
			<groupId>org.freemarker</groupId>
			<artifactId>freemarker</artifactId>
			<version>2.3.22</version>
		</dependency>
		<dependency>
			<groupId>org.apache.geronimo.specs</groupId>
			<artifactId>geronimo-jta_1.1_spec</artifactId>
			<version>1.1.1</version>
		</dependency>
		<dependency>
			<groupId>org.icepdf.os</groupId>
			<artifactId>icepdf-core</artifactId>
			<version>6.2.2</version>
			<exclusions>
				<exclusion>
					<groupId>javax.media</groupId>
					<artifactId>jai_core</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.jboss</groupId>
			<artifactId>jandex</artifactId>
			<version>2.4.0.Final</version>
		</dependency>
		<dependency>
			<groupId>tomcat</groupId>
			<artifactId>jasper-compiler</artifactId>
			<version>5.5.23</version>
		</dependency>
		<dependency>
			<groupId>tomcat</groupId>
			<artifactId>jasper-runtime</artifactId>
			<version>5.5.23</version>
		</dependency>
		<dependency>
			<groupId>org.bytedeco</groupId>
			<artifactId>javacv</artifactId>
			<version>1.5.6</version>
		</dependency>
		<dependency>
			<groupId>com.googlecode.javacpp</groupId>
			<artifactId>javacpp</artifactId>
			<version>0.7</version>
		</dependency>
		<dependency>
			<groupId>org.javassist</groupId>
			<artifactId>javassist</artifactId>
			<version>3.28.0-GA</version>
		</dependency>
		<dependency>
			<groupId>jaxen</groupId>
			<artifactId>jaxen</artifactId>
			<version>1.2.0</version>
		</dependency>
		<dependency>
			<groupId>jcifs</groupId>
			<artifactId>jcifs</artifactId>
			<version>1.3.17</version>
		</dependency>
		<dependency>
			<groupId>com.github.davidmoten</groupId>
			<artifactId>junit-extras</artifactId>
			<version>0.4</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>1.18.20</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.mail</groupId>
			<artifactId>mail</artifactId>
			<version>1.5.0-b01</version>
		</dependency>
		<dependency>
			<groupId>ognl</groupId>
			<artifactId>ognl</artifactId>
			<version>3.2.21</version>
		</dependency>
		<dependency>
			<groupId>com.oracle.database.jdbc</groupId>
			<artifactId>ojdbc5</artifactId>
			<version>11.2.0.4</version>
		</dependency>
		<dependency>
			<groupId>org.apache.shiro.tools</groupId>
			<artifactId>shiro-tools-hasher</artifactId>
			<version>1.8.0</version>
			<exclusions>
				<exclusion>
					<groupId>ch.qos.logback</groupId>
					<artifactId>logback-classic</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-simple</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>com.zaxxer</groupId>
			<artifactId>SparseBitSet</artifactId>
			<version>1.2</version>
		</dependency>
		<dependency>
			<groupId>org.apache.struts</groupId>
			<artifactId>struts2-core</artifactId>
			<version>2.5.26</version>
		</dependency>
		<dependency>
			<groupId>org.apache.tomcat</groupId>
			<artifactId>tomcat-websocket</artifactId>
			<version>8.5.47</version>
		</dependency>
		<!-- 百度ueditor修改版，可以自定义目录 -->
		<dependency>
			<groupId>com.blingblingbang</groupId>
			<artifactId>ueditor</artifactId>
			<version>1.1.2</version>
		</dependency>
		<dependency>
			<groupId>eu.bitwalker</groupId>
			<artifactId>UserAgentUtils</artifactId>
			<version>1.21</version>
		</dependency>
		<dependency>
			<groupId>javax.validation</groupId>
			<artifactId>validation-api</artifactId>
			<version>2.0.1.Final</version>
		</dependency>
		<dependency>
			<groupId>javax.websocket</groupId>
			<artifactId>javax.websocket-api</artifactId>
			<version>1.1</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>com.thoughtworks.xstream</groupId>
			<artifactId>xstream</artifactId>
			<version>1.4.18</version>
		</dependency>
		<dependency>
			<groupId>org.apache.struts.xwork</groupId>
			<artifactId>xwork-core</artifactId>
			<version>2.3.37</version>
		</dependency>
		<dependency>
			<groupId>net.lingala.zip4j</groupId>
			<artifactId>zip4j</artifactId>
			<version>2.9.0</version>
		</dependency>
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>30.1.1-jre</version>
		</dependency>
		<dependency>
			<groupId>org.apache.xmlbeans</groupId>
			<artifactId>xmlbeans</artifactId>
			<version>5.0.1</version>
		</dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-websocket</artifactId>
        </dependency>
        <!-- ——————————————————————————————未知jar END——————————————————————————————————— -->
	</dependencies>

	<build>
		<!-- 打包名称 -->
		<finalName>thymeleaf_charts_websocket_jpa</finalName>
		<plugins>
			<!-- maven插件，可将项目打包成一个可执行的jar包 -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<!-- spring-boot:run 中文乱码解决 -->
				<configuration>
					<fork>true</fork>
					<!-- 增加jvm参数 -->
					<jvmArguments>-Dfile.encoding=UTF-8</jvmArguments>
				</configuration>
			</plugin>
			<!-- 自动生成mapper pojo -->
			<plugin>
				<groupId>org.mybatis.generator</groupId>
				<artifactId>mybatis-generator-maven-plugin</artifactId>
				<version>1.3.5</version>
				<dependencies>
					<!-- 配置这个依赖主要是为了等下在配置mybatis-generator.xml的时候可以不用配置classPathEntry这样的一个属性，避免代码的耦合度太高 -->
					<dependency>
						<groupId>com.microsoft.sqlserver</groupId>
						<artifactId>sqljdbc4</artifactId>
						<version>4.0</version>
					</dependency>
					<dependency>
						<groupId>tk.mybatis</groupId>
						<artifactId>mapper</artifactId>
						<version>3.4.0</version>
					</dependency>
				</dependencies>
				<executions>
					<execution>
						<id>Generate MyBatis Artifacts</id>
						<phase>package</phase>
						<goals>
							<goal>generate</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<!-- 允许移动生成的文件 -->
					<verbose>true</verbose>
					<!-- 是否覆盖 -->
					<overwrite>true</overwrite>
					<!-- 自动生成的配置 -->
					<configurationFile>src/main/resources/generator/mybatis-generator.xml</configurationFile>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>
